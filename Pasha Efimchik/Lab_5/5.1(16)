//IDE: VisualStudio
//Task 5.1(16)
/*
Дан стек, каждый элемент которого содержит указатель на двунаправленный список. 
В каждом элементе списков хранится слово. С помощью рекурсивной функции 
вывести каждое слово в обратном порядке. На основе списков составить 
один упорядоченный по алфавиту стек и распечатать его. 
*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>

int check_input()
{
	int a;
	while (!scanf_s("%d", &a) || a <= 0)
	{
		printf("Некорректный ввод, повторите попытку: ");
		fseek(stdin, 0L, SEEK_SET);
	}
	return a;
}

struct List_Node
{
	char* word;
	List_Node* pNext, * pPrev;
};

struct List
{
	int size;
	List_Node* pHead, * pTail;
};

List* create_List()
{
	List* tmp = (List*)malloc(sizeof(List));
	if (tmp == NULL) 
		exit(0);
	tmp->size = 0;
	tmp->pHead = tmp->pTail = NULL;
	return tmp;
}

void reverse_words(char* s, int length)
{
	if (length == 0)
	{
		printf("%c", s[length]);
		return;
	}
	else
	{
		printf("%c", s[length]);
		reverse_words(s, length - 1);
	}
}

char* input_words()
{
	printf("Введите слово: ");
	char* word = (char*)malloc(80 * sizeof(char));
	if (!word) exit(2);
	fseek(stdin, 0L, SEEK_SET);
	fgets(word, 80, stdin);
	return word;
}

void add_to_List(List* lst)
{
	List_Node* tmp = (List_Node*)malloc(sizeof(List_Node));
	if (!tmp) exit(1);
	tmp->word = input_words();
	tmp->pNext = NULL;
	tmp->pPrev = lst->pTail;
	if (lst->pTail) lst->pTail->pNext = tmp;
	lst->pTail = tmp;
	if (!lst->pHead) lst->pHead = tmp;
	lst->size++;
}

void delete_from_List(List* lst)
{
	if (!lst->pTail) 
		exit(2);
	List_Node* tmp = lst->pTail;
	lst->pTail = lst->pTail->pPrev;
	lst->pTail->pNext = NULL;
	lst->size--;
	free(tmp);
}

void delete_List(List* lst)
{
	while (lst->pHead) 
		delete_from_List(lst);
	free(lst);
}

void output_List(List* lst)
{
	if (!lst->pHead) 
		exit(3);
	List_Node* tmp = lst->pHead;
	for (int i = 1; tmp; i++)
	{
		reverse_words(tmp->word, strlen(tmp->word) - 1);
		tmp = tmp->pNext;
	}
}

struct Stack_Node
{
	List* list;
	Stack_Node* pNext, * pPrev;
};

struct Stack_List
{
	int size;
	Stack_Node* pHead, * pTail;
};

Stack_List* stack_create()
{
	Stack_List* tmp = (Stack_List*)malloc(sizeof(Stack_List));
	if (!tmp) 
		exit(0);
	tmp->size = 0;
	tmp->pHead = tmp->pTail = NULL;
}

void add_to_stack(Stack_List* stk)
{
	Stack_Node* tmp = (Stack_Node*)malloc(sizeof(Stack_Node));
	if (!tmp)
		exit(1);
	int num;
	printf("Введите кол-во слов: ");
	while (!scanf_s("%d", &num) || num <= 0)
	{
		printf("Некорректный ввод, повторите попытку: ");
		fseek(stdin, 0L, SEEK_SET);
	}
	tmp->list = create_List();
	for (int i = 0; i < num; i++) 
		add_to_List(tmp->list);
	tmp->pNext = NULL;
	tmp->pPrev = stk->pTail;
	if (!stk->pHead) 
		stk->pHead = tmp;
	if (stk->pTail) 
		stk->pTail->pNext = tmp;
	stk->pTail = tmp;
	stk->size++;
}

void delete_from_stack(Stack_List* stk)
{
	stk->size--;
	Stack_Node* tmp = stk->pTail;
	stk->pTail = stk->pTail->pPrev;
	free(tmp);
}

void delete_stack(Stack_List* stk)
{
	while (stk->size) 
		delete_from_stack(stk);
	free(stk);
}

void output_stack_List(Stack_List* stk)
{
	Stack_Node* tmp = stk->pHead;
	for (int i = 1; tmp; i++)
	{
		printf("\nСписок %d", i);
		output_List(tmp->list);
		printf("\n");
		tmp = tmp->pNext;
	}
}

struct Node
{
	char* word;
	Node* pNext, * pPrev;
};

struct Stack
{
	int size;
	Node* pHead, * pTail;
};

Stack* Create_stack()
{
	Stack* tmp = (Stack*)malloc(sizeof(Stack));
	if (!tmp) exit(0);
	tmp->size = 0;
	tmp->pHead = tmp->pTail = NULL;
}

void Add_to_stack(Stack* stk, char* w)
{
	Node* tmp = (Node*)malloc(sizeof(Node));
	if (!tmp)exit(1);
	tmp->word = w;
	tmp->pNext = NULL;
	tmp->pPrev = stk->pTail;
	if (!stk->pHead) stk->pHead = tmp;
	if (stk->pTail) stk->pTail->pNext = tmp;
	stk->pTail = tmp;
	stk->size++;
}

void Delete_from_stack(Stack* stk)
{
	stk->size--;
	Node* tmp = stk->pTail;
	stk->pTail = stk->pTail->pPrev;
	free(tmp);
}

void Delete_stack(Stack* stk)
{
	while (stk->size) Delete_from_stack(stk);
	free(stk);
}

void Output_stack(Stack* stk)
{
	printf("\nОтсортированный список:\n");
	Node* tmp = stk->pHead;
	for (int i = 1; tmp; i++)
	{
		printf("%d. ", i);
		printf("%s", tmp->word);
		tmp = tmp->pNext;
	}
}

void Sorted_list(Stack_List* stl, Stack* stk)
{
	int k = 0;
	Stack_Node* tmp = stl->pHead;
	for (int i = 0; i < stl->size; i++)
	{
		k += tmp->list->size;
		tmp = tmp->pNext;
	}
	char** words = (char**)malloc(k * sizeof(char*));
	if (!words) 
		exit(1);
	for (int i = 0; i < k; i++)
	{
		words[i] = (char*)malloc(k * sizeof(char));
		if (!words) 
			exit(1);
	}
	tmp = stl->pHead;
	List_Node* N = tmp->list->pHead;
	for (int i = 0; i < k; i++)
	{
		if (!N)
		{
			tmp = tmp->pNext;
			N = tmp->list->pHead;
			i--;
		}
		else
		{
			words[i] = N->word;
			N = N->pNext;
		}
	}

	for (int i = 0; i < k; i++)
	{
		for (int j = i + 1; j < k; j++)
		{
			if (strcmp(words[i], words[j]) > 0)
			{
				char* temp = (char*)malloc(80 * sizeof(char));
				strcpy(temp, words[i]);
				strcpy(words[i], words[j]);
				strcpy(words[j], temp);
			}
		}
	}
	for (int i = 0; i < k; i++) 
		Add_to_stack(stk, words[i]);
}

int main()
{
	setlocale(LC_ALL, "rus");
	Stack_List* stl = stack_create();
	printf("Введите количество списков в стэке: ");
	int count = check_input();
	for (int i = 0; i < count; i++)
	{
		printf("\nСписок %d:\n", i + 1);
		add_to_stack(stl);
	}
	printf("\nСлова списка в обратном порядке:");
	output_stack_List(stl);
	Stack* stk = Create_stack();
	Sorted_list(stl, stk);
	delete_stack(stl);
	Output_stack(stk);
	Delete_stack(stk);
	return 0;
}
